.. _envoy_v3_api_file_envoy/service/trace/v3/trace_service.proto:

Trace service (proto)
=====================






.. _envoy_v3_api_msg_service.trace.v3.StreamTracesResponse:

service.trace.v3.StreamTracesResponse
-------------------------------------


:repo:`[service.trace.v3.StreamTracesResponse proto] <api/envoy/service/trace/v3/trace_service.proto#L30>`






.. _envoy_v3_api_msg_service.trace.v3.StreamTracesMessage:

service.trace.v3.StreamTracesMessage
------------------------------------


:repo:`[service.trace.v3.StreamTracesMessage proto] <api/envoy/service/trace/v3/trace_service.proto#L35>`




.. code-block:: json
  :force:

  {
    "identifier": {...},
    "spans": []
  }

.. _envoy_v3_api_field_service.trace.v3.StreamTracesMessage.identifier:


identifier
  (:ref:`service.trace.v3.StreamTracesMessage.Identifier <envoy_v3_api_msg_service.trace.v3.StreamTracesMessage.Identifier>`) Identifier data effectively is a structured metadata.
  As a performance optimization this will only be sent in the first message
  on the stream.


.. _envoy_v3_api_field_service.trace.v3.StreamTracesMessage.spans:


spans
  (**repeated** .opencensus.proto.trace.v1.Span) A list of Span entries


.. _envoy_v3_api_msg_service.trace.v3.StreamTracesMessage.Identifier:

service.trace.v3.StreamTracesMessage.Identifier
-----------------------------------------------


:repo:`[service.trace.v3.StreamTracesMessage.Identifier proto] <api/envoy/service/trace/v3/trace_service.proto#L39>`




.. code-block:: json
  :force:

  {
    "node": {...}
  }

.. _envoy_v3_api_field_service.trace.v3.StreamTracesMessage.Identifier.node:


node
  (:ref:`config.core.v3.Node <envoy_v3_api_msg_config.core.v3.Node>`, *REQUIRED*) The node sending the access log messages over the stream.



