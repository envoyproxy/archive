.. _envoy_v3_api_file_envoy/type/matcher/v3/string.proto:

String matcher (proto)
======================






.. _envoy_v3_api_msg_type.matcher.v3.StringMatcher:

type.matcher.v3.StringMatcher
-----------------------------


:repo:`[type.matcher.v3.StringMatcher proto] <api/envoy/type/matcher/v3/string.proto#L22>`

Specifies the way to match a string.



.. code-block:: json
  :force:

  {
    "exact": ...,
    "prefix": ...,
    "suffix": ...,
    "safe_regex": {...},
    "contains": ...,
    "custom": {...},
    "ignore_case": ...
  }

.. _envoy_v3_api_field_type.matcher.v3.StringMatcher.exact:


exact
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) The input string must match exactly the string specified here.

  Examples:

  * ``abc`` only matches the value ``abc``.


  

  Precisely one of :ref:`exact <envoy_v3_api_field_type.matcher.v3.StringMatcher.exact>`, :ref:`prefix <envoy_v3_api_field_type.matcher.v3.StringMatcher.prefix>`, :ref:`suffix <envoy_v3_api_field_type.matcher.v3.StringMatcher.suffix>`, :ref:`safe_regex <envoy_v3_api_field_type.matcher.v3.StringMatcher.safe_regex>`, :ref:`contains <envoy_v3_api_field_type.matcher.v3.StringMatcher.contains>`, :ref:`custom <envoy_v3_api_field_type.matcher.v3.StringMatcher.custom>` must be set.

.. _envoy_v3_api_field_type.matcher.v3.StringMatcher.prefix:


prefix
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) The input string must have the prefix specified here.

  .. note::

   Empty prefix match is not allowed, please use ``safe_regex`` instead.

  Examples:

  * ``abc`` matches the value ``abc.xyz``


  

  Precisely one of :ref:`exact <envoy_v3_api_field_type.matcher.v3.StringMatcher.exact>`, :ref:`prefix <envoy_v3_api_field_type.matcher.v3.StringMatcher.prefix>`, :ref:`suffix <envoy_v3_api_field_type.matcher.v3.StringMatcher.suffix>`, :ref:`safe_regex <envoy_v3_api_field_type.matcher.v3.StringMatcher.safe_regex>`, :ref:`contains <envoy_v3_api_field_type.matcher.v3.StringMatcher.contains>`, :ref:`custom <envoy_v3_api_field_type.matcher.v3.StringMatcher.custom>` must be set.

.. _envoy_v3_api_field_type.matcher.v3.StringMatcher.suffix:


suffix
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) The input string must have the suffix specified here.

  .. note::

   Empty suffix match is not allowed, please use ``safe_regex`` instead.

  Examples:

  * ``abc`` matches the value ``xyz.abc``


  

  Precisely one of :ref:`exact <envoy_v3_api_field_type.matcher.v3.StringMatcher.exact>`, :ref:`prefix <envoy_v3_api_field_type.matcher.v3.StringMatcher.prefix>`, :ref:`suffix <envoy_v3_api_field_type.matcher.v3.StringMatcher.suffix>`, :ref:`safe_regex <envoy_v3_api_field_type.matcher.v3.StringMatcher.safe_regex>`, :ref:`contains <envoy_v3_api_field_type.matcher.v3.StringMatcher.contains>`, :ref:`custom <envoy_v3_api_field_type.matcher.v3.StringMatcher.custom>` must be set.

.. _envoy_v3_api_field_type.matcher.v3.StringMatcher.safe_regex:


safe_regex
  (:ref:`type.matcher.v3.RegexMatcher <envoy_v3_api_msg_type.matcher.v3.RegexMatcher>`) The input string must match the regular expression specified here.


  

  Precisely one of :ref:`exact <envoy_v3_api_field_type.matcher.v3.StringMatcher.exact>`, :ref:`prefix <envoy_v3_api_field_type.matcher.v3.StringMatcher.prefix>`, :ref:`suffix <envoy_v3_api_field_type.matcher.v3.StringMatcher.suffix>`, :ref:`safe_regex <envoy_v3_api_field_type.matcher.v3.StringMatcher.safe_regex>`, :ref:`contains <envoy_v3_api_field_type.matcher.v3.StringMatcher.contains>`, :ref:`custom <envoy_v3_api_field_type.matcher.v3.StringMatcher.custom>` must be set.

.. _envoy_v3_api_field_type.matcher.v3.StringMatcher.contains:


contains
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) The input string must have the substring specified here.

  .. note::

   Empty contains match is not allowed, please use ``safe_regex`` instead.

  Examples:

  * ``abc`` matches the value ``xyz.abc.def``


  

  Precisely one of :ref:`exact <envoy_v3_api_field_type.matcher.v3.StringMatcher.exact>`, :ref:`prefix <envoy_v3_api_field_type.matcher.v3.StringMatcher.prefix>`, :ref:`suffix <envoy_v3_api_field_type.matcher.v3.StringMatcher.suffix>`, :ref:`safe_regex <envoy_v3_api_field_type.matcher.v3.StringMatcher.safe_regex>`, :ref:`contains <envoy_v3_api_field_type.matcher.v3.StringMatcher.contains>`, :ref:`custom <envoy_v3_api_field_type.matcher.v3.StringMatcher.custom>` must be set.

.. _envoy_v3_api_field_type.matcher.v3.StringMatcher.custom:


custom
  (:ref:`.xds.core.v3.TypedExtensionConfig <envoy_v3_api_msg_.xds.core.v3.TypedExtensionConfig>`) Use an extension as the matcher type.


  .. _extension_category_envoy.string_matcher:

  .. tip::

    This extension category has the following known extensions:


    - :ref:`envoy.string_matcher.lua <extension_envoy.string_matcher.lua>`





  

  Precisely one of :ref:`exact <envoy_v3_api_field_type.matcher.v3.StringMatcher.exact>`, :ref:`prefix <envoy_v3_api_field_type.matcher.v3.StringMatcher.prefix>`, :ref:`suffix <envoy_v3_api_field_type.matcher.v3.StringMatcher.suffix>`, :ref:`safe_regex <envoy_v3_api_field_type.matcher.v3.StringMatcher.safe_regex>`, :ref:`contains <envoy_v3_api_field_type.matcher.v3.StringMatcher.contains>`, :ref:`custom <envoy_v3_api_field_type.matcher.v3.StringMatcher.custom>` must be set.

.. _envoy_v3_api_field_type.matcher.v3.StringMatcher.ignore_case:


ignore_case
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) If ``true``, indicates the exact/prefix/suffix/contains matching should be case insensitive. This
  has no effect for the ``safe_regex`` match.
  For example, the matcher ``data`` will match both input string ``Data`` and ``data`` if this option
  is set to ``true``.



.. _envoy_v3_api_msg_type.matcher.v3.ListStringMatcher:

type.matcher.v3.ListStringMatcher
---------------------------------


:repo:`[type.matcher.v3.ListStringMatcher proto] <api/envoy/type/matcher/v3/string.proto#L88>`

Specifies a list of ways to match a string.



.. code-block:: json
  :force:

  {
    "patterns": []
  }

.. _envoy_v3_api_field_type.matcher.v3.ListStringMatcher.patterns:


patterns
  (**repeated** :ref:`type.matcher.v3.StringMatcher <envoy_v3_api_msg_type.matcher.v3.StringMatcher>`, *REQUIRED*) 

