.. _envoy_v3_api_file_envoy/extensions/path/rewrite/uri_template/v3/uri_template_rewrite.proto:

Uri Template Rewrite Config (proto)
===================================

.. _extension_envoy.path.rewrite.uri_template.uri_template_rewriter:

This extension has the qualified name ``envoy.path.rewrite.uri_template.uri_template_rewriter``


.. note::
  

  This extension is intended to be robust against both untrusted downstream and
  upstream traffic.

.. tip::
  This extension extends and can be used with the following extension category:


  - :ref:`envoy.path.rewrite <extension_category_envoy.path.rewrite>`



  This extension must be configured with one of the following type URLs:



  - :ref:`type.googleapis.com/envoy.extensions.path.rewrite.uri_template.v3.UriTemplateRewriteConfig <envoy_v3_api_msg_extensions.path.rewrite.uri_template.v3.UriTemplateRewriteConfig>`







.. _envoy_v3_api_msg_extensions.path.rewrite.uri_template.v3.UriTemplateRewriteConfig:

extensions.path.rewrite.uri_template.v3.UriTemplateRewriteConfig
----------------------------------------------------------------


:repo:`[extensions.path.rewrite.uri_template.v3.UriTemplateRewriteConfig proto] <api/envoy/extensions/path/rewrite/uri_template/v3/uri_template_rewrite.proto#L55>`

Indicates that during forwarding, portions of the path that match the
pattern should be rewritten, even allowing the substitution of variables
from the match pattern into the new path as specified by the rewrite template.
This is useful to allow application paths to be
rewritten in a way that is aware of segments with variable content like
identifiers. The router filter will place the original path as it was
before the rewrite into the :ref:`x-envoy-original-path
<config_http_filters_router_x-envoy-original-path>` header.

Only one of :ref:`prefix_rewrite <envoy_v3_api_field_config.route.v3.RouteAction.prefix_rewrite>`,
:ref:`regex_rewrite <envoy_v3_api_field_config.route.v3.RouteAction.regex_rewrite>`,
or *path_template_rewrite* may be specified.

Template pattern matching types:

* ``*`` : Matches a single path component, up to the next path separator: /

* ``**`` : Matches zero or more path segments. If present, must be the last operator.

* ``{name} or {name=*}`` :  A named variable matching one path segment up to the next path separator: /.

* ``{name=videos/*}`` : A named variable matching more than one path segment.
     The path component matching videos/* is captured as the named variable.

* ``{name=**}`` : A named variable matching zero or more path segments.

Only named matches can be used to perform rewrites.

Examples using path_template_rewrite:

* The pattern ``/{one}/{two}`` paired with a substitution string of ``/{two}/{one}`` would
  transform ``/cat/dog`` into ``/dog/cat``.

* The pattern ``/videos/{language=lang/*}/*`` paired with a substitution string of
  ``/{language}`` would transform ``/videos/lang/en/video.m4s`` into ``lang/en``.

* The path pattern ``/content/{format}/{lang}/{id}/{file}.vtt`` paired with a substitution
  string of ``/{lang}/{format}/{file}.vtt`` would transform ``/content/hls/en-us/12345/en_193913.vtt``
  into ``/en-us/hls/en_193913.vtt``.



.. code-block:: json
  :force:

  {
    "path_template_rewrite": ...
  }

.. _envoy_v3_api_field_extensions.path.rewrite.uri_template.v3.UriTemplateRewriteConfig.path_template_rewrite:


path_template_rewrite
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, *REQUIRED*) 

