.. _envoy_v3_api_file_envoy/extensions/filters/http/aws_lambda/v3/aws_lambda.proto:

AWS Lambda (proto)
==================

.. _extension_envoy.filters.http.aws_lambda:

This extension has the qualified name ``envoy.filters.http.aws_lambda``


.. note::
  This extension is functional but has not had substantial production burn time,
  use only with this caveat.

  This extension is not hardened and should only be used in deployments
  where both the downstream and upstream are trusted.

.. tip::
  This extension extends and can be used with the following extension categories:


  - :ref:`envoy.filters.http <extension_category_envoy.filters.http>`

  - :ref:`envoy.filters.http.upstream <extension_category_envoy.filters.http.upstream>`



  This extension must be configured with one of the following type URLs:



  - :ref:`type.googleapis.com/envoy.extensions.filters.http.aws_lambda.v3.Config <envoy_v3_api_msg_extensions.filters.http.aws_lambda.v3.Config>`


  - :ref:`type.googleapis.com/envoy.extensions.filters.http.aws_lambda.v3.PerRouteConfig <envoy_v3_api_msg_extensions.filters.http.aws_lambda.v3.PerRouteConfig>`



AWS Lambda :ref:`configuration overview <config_http_filters_aws_lambda>`.




.. _envoy_v3_api_msg_extensions.filters.http.aws_lambda.v3.Config:

extensions.filters.http.aws_lambda.v3.Config
--------------------------------------------


:repo:`[extensions.filters.http.aws_lambda.v3.Config proto] <api/envoy/extensions/filters/http/aws_lambda/v3/aws_lambda.proto#L20>`

AWS Lambda filter config



.. code-block:: json
  :force:

  {
    "arn": ...,
    "payload_passthrough": ...,
    "invocation_mode": ...,
    "host_rewrite": ...,
    "credentials_profile": ...
  }

.. _envoy_v3_api_field_extensions.filters.http.aws_lambda.v3.Config.arn:


arn
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, *REQUIRED*) The ARN of the AWS Lambda to invoke when the filter is engaged
  Must be in the following format:
  arn:<partition>:lambda:<region>:<account-number>:function:<function-name>


.. _envoy_v3_api_field_extensions.filters.http.aws_lambda.v3.Config.payload_passthrough:


payload_passthrough
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Whether to transform the request (headers and body) to a JSON payload or pass it as is.


.. _envoy_v3_api_field_extensions.filters.http.aws_lambda.v3.Config.invocation_mode:


invocation_mode
  (:ref:`extensions.filters.http.aws_lambda.v3.Config.InvocationMode <envoy_v3_api_enum_extensions.filters.http.aws_lambda.v3.Config.InvocationMode>`) Determines the way to invoke the Lambda function.


.. _envoy_v3_api_field_extensions.filters.http.aws_lambda.v3.Config.host_rewrite:


host_rewrite
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Indicates that before signing headers, the host header will be swapped with
  this value. If not set or empty, the original host header value
  will be used and no rewrite will happen.

  Note: this rewrite affects both signing and host header forwarding. However, this
  option shouldn't be used with
  :ref:`HCM host rewrite <envoy_v3_api_field_config.route.v3.RouteAction.host_rewrite_literal>` given that the
  value set here would be used for signing whereas the value set in the HCM would be used
  for host header forwarding which is not the desired outcome.
  Changing the value of the host header can result in a different route to be selected
  if an HTTP filter after AWS lambda re-evaluates the route (clears route cache).


.. _envoy_v3_api_field_extensions.filters.http.aws_lambda.v3.Config.credentials_profile:


credentials_profile
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Specifies the credentials profile to be used from the AWS credentials file.
  This parameter is optional. If set, it will override the value set in the AWS_PROFILE env variable and
  the provider chain is limited to the AWS credentials file Provider.
  Other providers are ignored


.. _envoy_v3_api_enum_extensions.filters.http.aws_lambda.v3.Config.InvocationMode:

Enum extensions.filters.http.aws_lambda.v3.Config.InvocationMode
----------------------------------------------------------------


:repo:`[extensions.filters.http.aws_lambda.v3.Config.InvocationMode proto] <api/envoy/extensions/filters/http/aws_lambda/v3/aws_lambda.proto#L24>`




.. _envoy_v3_api_enum_value_extensions.filters.http.aws_lambda.v3.Config.InvocationMode.SYNCHRONOUS:


SYNCHRONOUS
  *(DEFAULT)* ⁣This is the more common mode of invocation, in which Lambda responds after it has completed the function. In
  this mode the output of the Lambda function becomes the response of the HTTP request.


.. _envoy_v3_api_enum_value_extensions.filters.http.aws_lambda.v3.Config.InvocationMode.ASYNCHRONOUS:


ASYNCHRONOUS
  ⁣In this mode Lambda responds immediately but continues to process the function asynchronously. This mode can be
  used to signal events for example. In this mode, Lambda responds with an acknowledgment that it received the
  call which is translated to an HTTP 200 OK by the filter.




.. _envoy_v3_api_msg_extensions.filters.http.aws_lambda.v3.PerRouteConfig:

extensions.filters.http.aws_lambda.v3.PerRouteConfig
----------------------------------------------------


:repo:`[extensions.filters.http.aws_lambda.v3.PerRouteConfig proto] <api/envoy/extensions/filters/http/aws_lambda/v3/aws_lambda.proto#L68>`

Per-route configuration for AWS Lambda. This can be useful when invoking a different Lambda function or a different
version of the same Lambda depending on the route.



.. code-block:: json
  :force:

  {
    "invoke_config": {...}
  }

.. _envoy_v3_api_field_extensions.filters.http.aws_lambda.v3.PerRouteConfig.invoke_config:


invoke_config
  (:ref:`extensions.filters.http.aws_lambda.v3.Config <envoy_v3_api_msg_extensions.filters.http.aws_lambda.v3.Config>`) 

