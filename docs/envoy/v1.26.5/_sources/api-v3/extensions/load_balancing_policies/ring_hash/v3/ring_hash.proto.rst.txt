.. _envoy_v3_api_file_envoy/extensions/load_balancing_policies/ring_hash/v3/ring_hash.proto:

Ring Hash Load Balancing Policy (proto)
=======================================

.. _extension_envoy.load_balancing_policies.ring_hash:

This extension has the qualified name ``envoy.load_balancing_policies.ring_hash``


.. note::
  

  This extension is intended to be robust against both untrusted downstream and
  upstream traffic.

.. tip::
  This extension extends and can be used with the following extension category:


  - :ref:`envoy.load_balancing_policies <extension_category_envoy.load_balancing_policies>`



  This extension must be configured with one of the following type URLs:



  - :ref:`type.googleapis.com/envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash <envoy_v3_api_msg_extensions.load_balancing_policies.ring_hash.v3.RingHash>`







.. _envoy_v3_api_msg_extensions.load_balancing_policies.ring_hash.v3.RingHash:

extensions.load_balancing_policies.ring_hash.v3.RingHash
--------------------------------------------------------


:repo:`[extensions.load_balancing_policies.ring_hash.v3.RingHash proto] <api/envoy/extensions/load_balancing_policies/ring_hash/v3/ring_hash.proto#L25>`

This configuration allows the built-in RING_HASH LB policy to be configured via the LB policy
extension point. See the :ref:`load balancing architecture overview
<arch_overview_load_balancing_types>` for more information.



.. code-block:: json
  :force:

  {
    "hash_function": ...,
    "minimum_ring_size": {...},
    "maximum_ring_size": {...},
    "use_hostname_for_hashing": ...,
    "hash_balance_factor": {...},
    "consistent_hashing_lb_config": {...},
    "locality_weighted_lb_config": {...}
  }

.. _envoy_v3_api_field_extensions.load_balancing_policies.ring_hash.v3.RingHash.hash_function:


hash_function
  (:ref:`extensions.load_balancing_policies.ring_hash.v3.RingHash.HashFunction <envoy_v3_api_enum_extensions.load_balancing_policies.ring_hash.v3.RingHash.HashFunction>`) The hash function used to hash hosts onto the ketama ring. The value defaults to
  :ref:`XX_HASH<envoy_v3_api_enum_value_config.cluster.v3.Cluster.RingHashLbConfig.HashFunction.XX_HASH>`.


.. _envoy_v3_api_field_extensions.load_balancing_policies.ring_hash.v3.RingHash.minimum_ring_size:


minimum_ring_size
  (`UInt64Value <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#uint64value>`_) Minimum hash ring size. The larger the ring is (that is, the more hashes there are for each
  provided host) the better the request distribution will reflect the desired weights. Defaults
  to 1024 entries, and limited to 8M entries. See also
  :ref:`maximum_ring_size<envoy_v3_api_field_config.cluster.v3.Cluster.RingHashLbConfig.maximum_ring_size>`.


.. _envoy_v3_api_field_extensions.load_balancing_policies.ring_hash.v3.RingHash.maximum_ring_size:


maximum_ring_size
  (`UInt64Value <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#uint64value>`_) Maximum hash ring size. Defaults to 8M entries, and limited to 8M entries, but can be lowered
  to further constrain resource use. See also
  :ref:`minimum_ring_size<envoy_v3_api_field_config.cluster.v3.Cluster.RingHashLbConfig.minimum_ring_size>`.


.. _envoy_v3_api_field_extensions.load_balancing_policies.ring_hash.v3.RingHash.use_hostname_for_hashing:


use_hostname_for_hashing
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) If set to `true`, the cluster will use hostname instead of the resolved
  address as the key to consistently hash to an upstream host. Only valid for StrictDNS clusters with hostnames which resolve to a single IP address.

  ..note::
    This is deprecated and please use :ref:`consistent_hashing_lb_config
    <envoy_v3_api_field_extensions.load_balancing_policies.ring_hash.v3.RingHash.consistent_hashing_lb_config>` instead.


.. _envoy_v3_api_field_extensions.load_balancing_policies.ring_hash.v3.RingHash.hash_balance_factor:


hash_balance_factor
  (`UInt32Value <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#uint32value>`_) Configures percentage of average cluster load to bound per upstream host. For example, with a value of 150
  no upstream host will get a load more than 1.5 times the average load of all the hosts in the cluster.
  If not specified, the load is not bounded for any upstream host. Typical value for this parameter is between 120 and 200.
  Minimum is 100.

  This is implemented based on the method described in the paper https://arxiv.org/abs/1608.01350. For the specified
  `hash_balance_factor`, requests to any upstream host are capped at `hash_balance_factor/100` times the average number of requests
  across the cluster. When a request arrives for an upstream host that is currently serving at its max capacity, linear probing
  is used to identify an eligible host. Further, the linear probe is implemented using a random jump in hosts ring/table to identify
  the eligible host (this technique is as described in the paper https://arxiv.org/abs/1908.08762 - the random jump avoids the
  cascading overflow effect when choosing the next host in the ring/table).

  If weights are specified on the hosts, they are respected.

  This is an O(N) algorithm, unlike other load balancers. Using a lower `hash_balance_factor` results in more hosts
  being probed, so use a higher value if you require better performance.

  ..note::
    This is deprecated and please use :ref:`consistent_hashing_lb_config
    <envoy_v3_api_field_extensions.load_balancing_policies.ring_hash.v3.RingHash.consistent_hashing_lb_config>` instead.


.. _envoy_v3_api_field_extensions.load_balancing_policies.ring_hash.v3.RingHash.consistent_hashing_lb_config:


consistent_hashing_lb_config
  (:ref:`extensions.load_balancing_policies.common.v3.ConsistentHashingLbConfig <envoy_v3_api_msg_extensions.load_balancing_policies.common.v3.ConsistentHashingLbConfig>`) Common configuration for hashing-based load balancing policies.


.. _envoy_v3_api_field_extensions.load_balancing_policies.ring_hash.v3.RingHash.locality_weighted_lb_config:


locality_weighted_lb_config
  (:ref:`extensions.load_balancing_policies.common.v3.LocalityLbConfig.LocalityWeightedLbConfig <envoy_v3_api_msg_extensions.load_balancing_policies.common.v3.LocalityLbConfig.LocalityWeightedLbConfig>`) Enable locality weighted load balancing for ring hash lb explicitly.


.. _envoy_v3_api_enum_extensions.load_balancing_policies.ring_hash.v3.RingHash.HashFunction:

Enum extensions.load_balancing_policies.ring_hash.v3.RingHash.HashFunction
--------------------------------------------------------------------------


:repo:`[extensions.load_balancing_policies.ring_hash.v3.RingHash.HashFunction proto] <api/envoy/extensions/load_balancing_policies/ring_hash/v3/ring_hash.proto#L27>`

The hash function used to hash hosts onto the ketama ring.



.. _envoy_v3_api_enum_value_extensions.load_balancing_policies.ring_hash.v3.RingHash.HashFunction.DEFAULT_HASH:


DEFAULT_HASH
  *(DEFAULT)* ⁣Currently defaults to XX_HASH.


.. _envoy_v3_api_enum_value_extensions.load_balancing_policies.ring_hash.v3.RingHash.HashFunction.XX_HASH:


XX_HASH
  ⁣Use `xxHash <https://github.com/Cyan4973/xxHash>`_.


.. _envoy_v3_api_enum_value_extensions.load_balancing_policies.ring_hash.v3.RingHash.HashFunction.MURMUR_HASH_2:


MURMUR_HASH_2
  ⁣Use `MurmurHash2 <https://sites.google.com/site/murmurhash/>`_, this is compatible with
  std:hash<string> in GNU libstdc++ 3.4.20 or above. This is typically the case when compiled
  on Linux and not macOS.



