.. _envoy_v3_api_file_envoy/extensions/filters/network/tcp_proxy/v3/tcp_proxy.proto:

TCP Proxy (proto)
=================

.. _extension_envoy.filters.network.tcp_proxy:

This extension has the qualified name ``envoy.filters.network.tcp_proxy``


.. note::
  

  This extension is intended to be robust against untrusted downstream traffic. It
  assumes that the upstream is trusted.

.. tip::
  This extension extends and can be used with the following extension category:


  - :ref:`envoy.filters.network <extension_category_envoy.filters.network>`



  This extension must be configured with one of the following type URLs:



  - :ref:`type.googleapis.com/envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy <envoy_v3_api_msg_extensions.filters.network.tcp_proxy.v3.TcpProxy>`



TCP Proxy :ref:`configuration overview <config_network_filters_tcp_proxy>`.




.. _envoy_v3_api_msg_extensions.filters.network.tcp_proxy.v3.TcpProxy:

extensions.filters.network.tcp_proxy.v3.TcpProxy
------------------------------------------------


:repo:`[extensions.filters.network.tcp_proxy.v3.TcpProxy proto] <api/envoy/extensions/filters/network/tcp_proxy/v3/tcp_proxy.proto#L28>`




.. code-block:: json
  :force:

  {
    "stat_prefix": ...,
    "cluster": ...,
    "weighted_clusters": {...},
    "on_demand": {...},
    "metadata_match": {...},
    "idle_timeout": {...},
    "access_log": [],
    "max_connect_attempts": {...},
    "hash_policy": [],
    "tunneling_config": {...},
    "max_downstream_connection_duration": {...},
    "access_log_flush_interval": {...},
    "flush_access_log_on_connected": ...,
    "access_log_options": {...}
  }

.. _envoy_v3_api_field_extensions.filters.network.tcp_proxy.v3.TcpProxy.stat_prefix:


stat_prefix
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, *REQUIRED*) The prefix to use when emitting :ref:`statistics
  <config_network_filters_tcp_proxy_stats>`.


.. _envoy_v3_api_field_extensions.filters.network.tcp_proxy.v3.TcpProxy.cluster:


cluster
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) The upstream cluster to connect to.


  

  Precisely one of :ref:`cluster <envoy_v3_api_field_extensions.filters.network.tcp_proxy.v3.TcpProxy.cluster>`, :ref:`weighted_clusters <envoy_v3_api_field_extensions.filters.network.tcp_proxy.v3.TcpProxy.weighted_clusters>` must be set.

.. _envoy_v3_api_field_extensions.filters.network.tcp_proxy.v3.TcpProxy.weighted_clusters:


weighted_clusters
  (:ref:`extensions.filters.network.tcp_proxy.v3.TcpProxy.WeightedCluster <envoy_v3_api_msg_extensions.filters.network.tcp_proxy.v3.TcpProxy.WeightedCluster>`) Multiple upstream clusters can be specified for a given route. The
  request is routed to one of the upstream clusters based on weights
  assigned to each cluster.


  

  Precisely one of :ref:`cluster <envoy_v3_api_field_extensions.filters.network.tcp_proxy.v3.TcpProxy.cluster>`, :ref:`weighted_clusters <envoy_v3_api_field_extensions.filters.network.tcp_proxy.v3.TcpProxy.weighted_clusters>` must be set.

.. _envoy_v3_api_field_extensions.filters.network.tcp_proxy.v3.TcpProxy.on_demand:


on_demand
  (:ref:`extensions.filters.network.tcp_proxy.v3.TcpProxy.OnDemand <envoy_v3_api_msg_extensions.filters.network.tcp_proxy.v3.TcpProxy.OnDemand>`) The on demand policy for the upstream cluster.
  It applies to both
  :ref:`TcpProxy.cluster <envoy_v3_api_field_extensions.filters.network.tcp_proxy.v3.TcpProxy.cluster>`
  and
  :ref:`TcpProxy.weighted_clusters <envoy_v3_api_field_extensions.filters.network.tcp_proxy.v3.TcpProxy.weighted_clusters>`.


.. _envoy_v3_api_field_extensions.filters.network.tcp_proxy.v3.TcpProxy.metadata_match:


metadata_match
  (:ref:`config.core.v3.Metadata <envoy_v3_api_msg_config.core.v3.Metadata>`) Optional endpoint metadata match criteria. Only endpoints in the upstream
  cluster with metadata matching that set in metadata_match will be
  considered. The filter name should be specified as ``envoy.lb``.


.. _envoy_v3_api_field_extensions.filters.network.tcp_proxy.v3.TcpProxy.idle_timeout:


idle_timeout
  (`Duration <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#duration>`_) The idle timeout for connections managed by the TCP proxy filter. The idle timeout
  is defined as the period in which there are no bytes sent or received on either
  the upstream or downstream connection. If not set, the default idle timeout is 1 hour. If set
  to 0s, the timeout will be disabled.

  .. warning::
    Disabling this timeout has a highly likelihood of yielding connection leaks due to lost TCP
    FIN packets, etc.


.. _envoy_v3_api_field_extensions.filters.network.tcp_proxy.v3.TcpProxy.access_log:


access_log
  (**repeated** :ref:`config.accesslog.v3.AccessLog <envoy_v3_api_msg_config.accesslog.v3.AccessLog>`) Configuration for :ref:`access logs <arch_overview_access_logs>`
  emitted by the this tcp_proxy.


.. _envoy_v3_api_field_extensions.filters.network.tcp_proxy.v3.TcpProxy.max_connect_attempts:


max_connect_attempts
  (`UInt32Value <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#uint32value>`_) The maximum number of unsuccessful connection attempts that will be made before
  giving up. If the parameter is not specified, 1 connection attempt will be made.


.. _envoy_v3_api_field_extensions.filters.network.tcp_proxy.v3.TcpProxy.hash_policy:


hash_policy
  (**repeated** :ref:`type.v3.HashPolicy <envoy_v3_api_msg_type.v3.HashPolicy>`) Optional configuration for TCP proxy hash policy. If hash_policy is not set, the hash-based
  load balancing algorithms will select a host randomly. Currently the number of hash policies is
  limited to 1.


.. _envoy_v3_api_field_extensions.filters.network.tcp_proxy.v3.TcpProxy.tunneling_config:


tunneling_config
  (:ref:`extensions.filters.network.tcp_proxy.v3.TcpProxy.TunnelingConfig <envoy_v3_api_msg_extensions.filters.network.tcp_proxy.v3.TcpProxy.TunnelingConfig>`) If set, this configures tunneling, e.g. configuration options to tunnel TCP payload over
  HTTP CONNECT. If this message is absent, the payload will be proxied upstream as per usual.
  It is possible to dynamically override this configuration and disable tunneling per connection,
  by setting a per-connection filter state object for the key ``envoy.tcp_proxy.disable_tunneling``.


.. _envoy_v3_api_field_extensions.filters.network.tcp_proxy.v3.TcpProxy.max_downstream_connection_duration:


max_downstream_connection_duration
  (`Duration <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#duration>`_) The maximum duration of a connection. The duration is defined as the period since a connection
  was established. If not set, there is no max duration. When max_downstream_connection_duration
  is reached the connection will be closed. Duration must be at least 1ms.


.. _envoy_v3_api_field_extensions.filters.network.tcp_proxy.v3.TcpProxy.access_log_flush_interval:


access_log_flush_interval
  (`Duration <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#duration>`_) .. attention::
  This field is deprecated in favor of
  :ref:`access_log_flush_interval
  <envoy_v3_api_field_extensions.filters.network.tcp_proxy.v3.TcpProxy.TcpAccessLogOptions.access_log_flush_interval>`.
  Note that if both this field and :ref:`access_log_flush_interval
  <envoy_v3_api_field_extensions.filters.network.tcp_proxy.v3.TcpProxy.TcpAccessLogOptions.access_log_flush_interval>`
  are specified, the former (deprecated field) is ignored.


.. _envoy_v3_api_field_extensions.filters.network.tcp_proxy.v3.TcpProxy.flush_access_log_on_connected:


flush_access_log_on_connected
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) .. attention::
  This field is deprecated in favor of
  :ref:`flush_access_log_on_connected
  <envoy_v3_api_field_extensions.filters.network.tcp_proxy.v3.TcpProxy.TcpAccessLogOptions.flush_access_log_on_connected>`.
  Note that if both this field and :ref:`flush_access_log_on_connected
  <envoy_v3_api_field_extensions.filters.network.tcp_proxy.v3.TcpProxy.TcpAccessLogOptions.flush_access_log_on_connected>`
  are specified, the former (deprecated field) is ignored.


.. _envoy_v3_api_field_extensions.filters.network.tcp_proxy.v3.TcpProxy.access_log_options:


access_log_options
  (:ref:`extensions.filters.network.tcp_proxy.v3.TcpProxy.TcpAccessLogOptions <envoy_v3_api_msg_extensions.filters.network.tcp_proxy.v3.TcpProxy.TcpAccessLogOptions>`) Additional access log options for TCP Proxy.


.. _envoy_v3_api_msg_extensions.filters.network.tcp_proxy.v3.TcpProxy.WeightedCluster:

extensions.filters.network.tcp_proxy.v3.TcpProxy.WeightedCluster
----------------------------------------------------------------


:repo:`[extensions.filters.network.tcp_proxy.v3.TcpProxy.WeightedCluster proto] <api/envoy/extensions/filters/network/tcp_proxy/v3/tcp_proxy.proto#L35>`

Allows for specification of multiple upstream clusters along with weights
that indicate the percentage of traffic to be forwarded to each cluster.
The router selects an upstream cluster based on these weights.



.. code-block:: json
  :force:

  {
    "clusters": []
  }

.. _envoy_v3_api_field_extensions.filters.network.tcp_proxy.v3.TcpProxy.WeightedCluster.clusters:


clusters
  (**repeated** :ref:`extensions.filters.network.tcp_proxy.v3.TcpProxy.WeightedCluster.ClusterWeight <envoy_v3_api_msg_extensions.filters.network.tcp_proxy.v3.TcpProxy.WeightedCluster.ClusterWeight>`, *REQUIRED*) Specifies one or more upstream clusters associated with the route.


.. _envoy_v3_api_msg_extensions.filters.network.tcp_proxy.v3.TcpProxy.WeightedCluster.ClusterWeight:

extensions.filters.network.tcp_proxy.v3.TcpProxy.WeightedCluster.ClusterWeight
------------------------------------------------------------------------------


:repo:`[extensions.filters.network.tcp_proxy.v3.TcpProxy.WeightedCluster.ClusterWeight proto] <api/envoy/extensions/filters/network/tcp_proxy/v3/tcp_proxy.proto#L39>`




.. code-block:: json
  :force:

  {
    "name": ...,
    "weight": ...,
    "metadata_match": {...}
  }

.. _envoy_v3_api_field_extensions.filters.network.tcp_proxy.v3.TcpProxy.WeightedCluster.ClusterWeight.name:


name
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, *REQUIRED*) Name of the upstream cluster.


.. _envoy_v3_api_field_extensions.filters.network.tcp_proxy.v3.TcpProxy.WeightedCluster.ClusterWeight.weight:


weight
  (`uint32 <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) When a request matches the route, the choice of an upstream cluster is
  determined by its weight. The sum of weights across all entries in the
  clusters array determines the total weight.


.. _envoy_v3_api_field_extensions.filters.network.tcp_proxy.v3.TcpProxy.WeightedCluster.ClusterWeight.metadata_match:


metadata_match
  (:ref:`config.core.v3.Metadata <envoy_v3_api_msg_config.core.v3.Metadata>`) Optional endpoint metadata match criteria used by the subset load balancer. Only endpoints
  in the upstream cluster with metadata matching what is set in this field will be considered
  for load balancing. Note that this will be merged with what's provided in
  :ref:`TcpProxy.metadata_match
  <envoy_v3_api_field_extensions.filters.network.tcp_proxy.v3.TcpProxy.metadata_match>`, with values
  here taking precedence. The filter name should be specified as ``envoy.lb``.




.. _envoy_v3_api_msg_extensions.filters.network.tcp_proxy.v3.TcpProxy.TunnelingConfig:

extensions.filters.network.tcp_proxy.v3.TcpProxy.TunnelingConfig
----------------------------------------------------------------


:repo:`[extensions.filters.network.tcp_proxy.v3.TcpProxy.TunnelingConfig proto] <api/envoy/extensions/filters/network/tcp_proxy/v3/tcp_proxy.proto#L68>`

Configuration for tunneling TCP over other transports or application layers.
Tunneling is supported over both HTTP/1.1 and HTTP/2. Upstream protocol is
determined by the cluster configuration.



.. code-block:: json
  :force:

  {
    "hostname": ...,
    "use_post": ...,
    "headers_to_add": [],
    "propagate_response_headers": ...,
    "post_path": ...,
    "propagate_response_trailers": ...
  }

.. _envoy_v3_api_field_extensions.filters.network.tcp_proxy.v3.TcpProxy.TunnelingConfig.hostname:


hostname
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, *REQUIRED*) The hostname to send in the synthesized CONNECT headers to the upstream proxy.
  This field evaluates command operators if set, otherwise returns hostname as is.

  Example: dynamically set hostname using downstream SNI

  .. code-block:: yaml

     tunneling_config:
       hostname: "%REQUESTED_SERVER_NAME%:443"

  Example: dynamically set hostname using dynamic metadata

  .. code-block:: yaml

     tunneling_config:
       hostname: "%DYNAMIC_METADATA(tunnel:address)%"



.. _envoy_v3_api_field_extensions.filters.network.tcp_proxy.v3.TcpProxy.TunnelingConfig.use_post:


use_post
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Use POST method instead of CONNECT method to tunnel the TCP stream.
  The 'protocol: bytestream' header is also NOT set for HTTP/2 to comply with the spec.

  The upstream proxy is expected to convert POST payload as raw TCP.


.. _envoy_v3_api_field_extensions.filters.network.tcp_proxy.v3.TcpProxy.TunnelingConfig.headers_to_add:


headers_to_add
  (**repeated** :ref:`config.core.v3.HeaderValueOption <envoy_v3_api_msg_config.core.v3.HeaderValueOption>`) Additional request headers to upstream proxy. This is mainly used to
  trigger upstream to convert POST requests back to CONNECT requests.

  Neither ``:-prefixed`` pseudo-headers nor the Host: header can be overridden.


.. _envoy_v3_api_field_extensions.filters.network.tcp_proxy.v3.TcpProxy.TunnelingConfig.propagate_response_headers:


propagate_response_headers
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Save the response headers to the downstream info filter state for consumption
  by the network filters. The filter state key is ``envoy.tcp_proxy.propagate_response_headers``.


.. _envoy_v3_api_field_extensions.filters.network.tcp_proxy.v3.TcpProxy.TunnelingConfig.post_path:


post_path
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) The path used with POST method. Default path is ``/``. If post path is specified and
  :ref:`use_post field <envoy_v3_api_field_extensions.filters.network.tcp_proxy.v3.TcpProxy.TunnelingConfig.use_post>`
  isn't true, it will be rejected.


.. _envoy_v3_api_field_extensions.filters.network.tcp_proxy.v3.TcpProxy.TunnelingConfig.propagate_response_trailers:


propagate_response_trailers
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Save the response trailers to the downstream info filter state for consumption
  by the network filters. The filter state key is ``envoy.tcp_proxy.propagate_response_trailers``.



.. _envoy_v3_api_msg_extensions.filters.network.tcp_proxy.v3.TcpProxy.OnDemand:

extensions.filters.network.tcp_proxy.v3.TcpProxy.OnDemand
---------------------------------------------------------


:repo:`[extensions.filters.network.tcp_proxy.v3.TcpProxy.OnDemand proto] <api/envoy/extensions/filters/network/tcp_proxy/v3/tcp_proxy.proto#L118>`




.. code-block:: json
  :force:

  {
    "odcds_config": {...}
  }

.. _envoy_v3_api_field_extensions.filters.network.tcp_proxy.v3.TcpProxy.OnDemand.odcds_config:


odcds_config
  (:ref:`config.core.v3.ConfigSource <envoy_v3_api_msg_config.core.v3.ConfigSource>`) An optional configuration for on-demand cluster discovery
  service. If not specified, the on-demand cluster discovery will
  be disabled. When it's specified, the filter will pause a request
  to an unknown cluster and will begin a cluster discovery
  process. When the discovery is finished (successfully or not),
  the request will be resumed.



.. _envoy_v3_api_msg_extensions.filters.network.tcp_proxy.v3.TcpProxy.TcpAccessLogOptions:

extensions.filters.network.tcp_proxy.v3.TcpProxy.TcpAccessLogOptions
--------------------------------------------------------------------


:repo:`[extensions.filters.network.tcp_proxy.v3.TcpProxy.TcpAccessLogOptions proto] <api/envoy/extensions/filters/network/tcp_proxy/v3/tcp_proxy.proto#L137>`




.. code-block:: json
  :force:

  {
    "access_log_flush_interval": {...},
    "flush_access_log_on_connected": ...
  }

.. _envoy_v3_api_field_extensions.filters.network.tcp_proxy.v3.TcpProxy.TcpAccessLogOptions.access_log_flush_interval:


access_log_flush_interval
  (`Duration <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#duration>`_) The interval to flush access log. The TCP proxy will flush only one access log when the connection
  is closed by default. If this field is set, the TCP proxy will flush access log periodically with
  the specified interval.
  The interval must be at least 1ms.


.. _envoy_v3_api_field_extensions.filters.network.tcp_proxy.v3.TcpProxy.TcpAccessLogOptions.flush_access_log_on_connected:


flush_access_log_on_connected
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) If set to true, access log will be flushed when the TCP proxy has successfully established a
  connection with the upstream. If the connection failed, the access log will not be flushed.



