.. _envoy_v3_api_file_envoy/extensions/load_balancing_policies/override_host/v3/override_host.proto:

Override Host Load Balancing Policy (proto)
===========================================

.. _extension_envoy.load_balancing_policies.override_host:

This extension has the qualified name ``envoy.load_balancing_policies.override_host``


.. note::
  This extension is functional but has not had substantial production burn time,
  use only with this caveat.

  This extension has an unknown security posture and should only be
  used in deployments where both the downstream and upstream are
  trusted.

.. tip::
  This extension extends and can be used with the following extension category:


  - :ref:`envoy.load_balancing_policies <extension_category_envoy.load_balancing_policies>`



  This extension must be configured with one of the following type URLs:



  - :ref:`type.googleapis.com/envoy.extensions.load_balancing_policies.override_host.v3.OverrideHost <envoy_v3_api_msg_extensions.load_balancing_policies.override_host.v3.OverrideHost>`







.. _envoy_v3_api_msg_extensions.load_balancing_policies.override_host.v3.OverrideHost:

extensions.load_balancing_policies.override_host.v3.OverrideHost
----------------------------------------------------------------


:repo:`[extensions.load_balancing_policies.override_host.v3.OverrideHost proto] <api/envoy/extensions/load_balancing_policies/override_host/v3/override_host.proto#L50>`

Configuration for the Override Host Load Balancing policy.

This policy allows endpoint picking to be implemented in downstream HTTP filters. For example an ext_proc RPC to a service
that implements k8s proposal for AI gateway inferences extensions
https://github.com/kubernetes-sigs/gateway-api-inference-extension/tree/main/docs/proposals/004-endpoint-picker-protocol
can provide hosts for serving a request using Override Host load balancing policy.

This policy extracts selected override hosts from a list of ``OverrideHostSource`` (request headers, metadata, etc.).

The override host source must specify at least one host in ``IP:Port`` format or multiple hosts in ``IP:Port,IP:Port,...``
format. For example ``10.0.0.5:8080`` or ``[2600:4040:5204::1574:24ae]:80``. The IPv6 address is enclosed in square brackets.

For specific example, to support k8s gateway inference extensions, which uses the ``x-gateway-destination-endpoint``
header or metadata value under the "envoy.lb" key for selected hosts, the Override Host load balancing policy should be
configured in the following way:

.. code-block:: yaml

   override_host_sources:
     - header: "x-gateway-destination-endpoint"
     - metadata:
         key: "envoy.lb"
         path:
         - key: "x-gateway-destination-endpoint"

If no valid host in the override host list, then the specified fallback load balancing policy is used. This allows load
balancing to degrade to a a built in policy (i.e. Round Robin) in case external endpoint picker fails.

See the :ref:`load balancing architecture
overview<arch_overview_load_balancing_types>` for more information.




.. code-block:: json
  :force:

  {
    "override_host_sources": [],
    "fallback_policy": {...}
  }

.. _envoy_v3_api_field_extensions.load_balancing_policies.override_host.v3.OverrideHost.override_host_sources:


override_host_sources
  (**repeated** :ref:`extensions.load_balancing_policies.override_host.v3.OverrideHost.OverrideHostSource <envoy_v3_api_msg_extensions.load_balancing_policies.override_host.v3.OverrideHost.OverrideHostSource>`, *REQUIRED*) A list of sources to get host addresses from. The host sources are searched in the order
  specified. The request is forwarded to the first address and subsequent addresses are used
  for request retries or hedging.
  Note that if an overridden host address is not present in the current endpoint set, it is
  skipped and the next found address is used. If there are not enough overridden addresses to
  satisfy all retry attempts the fallback load balancing policy is used to pick a host.


.. _envoy_v3_api_field_extensions.load_balancing_policies.override_host.v3.OverrideHost.fallback_policy:


fallback_policy
  (:ref:`config.cluster.v3.LoadBalancingPolicy <envoy_v3_api_msg_config.cluster.v3.LoadBalancingPolicy>`, *REQUIRED*) The child LB policy to use in case neither header nor metadata with selected
  hosts is present.


.. _envoy_v3_api_msg_extensions.load_balancing_policies.override_host.v3.OverrideHost.OverrideHostSource:

extensions.load_balancing_policies.override_host.v3.OverrideHost.OverrideHostSource
-----------------------------------------------------------------------------------


:repo:`[extensions.load_balancing_policies.override_host.v3.OverrideHost.OverrideHostSource proto] <api/envoy/extensions/load_balancing_policies/override_host/v3/override_host.proto#L51>`




.. code-block:: json
  :force:

  {
    "header": ...,
    "metadata": {...}
  }

.. _envoy_v3_api_field_extensions.load_balancing_policies.override_host.v3.OverrideHost.OverrideHostSource.header:


header
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) The header to get the override host addresses.

  Only one of the header or metadata field could be set.


.. _envoy_v3_api_field_extensions.load_balancing_policies.override_host.v3.OverrideHost.OverrideHostSource.metadata:


metadata
  (:ref:`type.metadata.v3.MetadataKey <envoy_v3_api_msg_type.metadata.v3.MetadataKey>`) The metadata key to get the override host addresses from the request dynamic metadata. If
  set this field then it will take precedence over the header field.

  Only one of the header or metadata field could be set.



