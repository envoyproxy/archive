.. _envoy_v3_api_file_envoy/extensions/filters/network/rbac/v3/rbac.proto:

RBAC (proto)
============

.. _extension_envoy.filters.network.rbac:

This extension has the qualified name ``envoy.filters.network.rbac``


.. note::
  

  This extension is intended to be robust against untrusted downstream traffic. It
  assumes that the upstream is trusted.

.. tip::
  This extension extends and can be used with the following extension category:


  - :ref:`envoy.filters.network <extension_category_envoy.filters.network>`



  This extension must be configured with one of the following type URLs:



  - :ref:`type.googleapis.com/envoy.extensions.filters.network.rbac.v3.RBAC <envoy_v3_api_msg_extensions.filters.network.rbac.v3.RBAC>`



Role-Based Access Control :ref:`configuration overview <config_network_filters_rbac>`.




.. _envoy_v3_api_msg_extensions.filters.network.rbac.v3.RBAC:

extensions.filters.network.rbac.v3.RBAC
---------------------------------------


:repo:`[extensions.filters.network.rbac.v3.RBAC proto] <api/envoy/extensions/filters/network/rbac/v3/rbac.proto#L29>`

RBAC network filter config.

Header should not be used in rules/shadow_rules in RBAC network filter as
this information is only available in :ref:`RBAC http filter <config_http_filters_rbac>`.



.. code-block:: json
  :force:

  {
    "rules": {...},
    "matcher": {...},
    "shadow_rules": {...},
    "shadow_matcher": {...},
    "shadow_rules_stat_prefix": ...,
    "stat_prefix": ...,
    "enforcement_type": ...
  }

.. _envoy_v3_api_field_extensions.filters.network.rbac.v3.RBAC.rules:


rules
  (:ref:`config.rbac.v3.RBAC <envoy_v3_api_msg_config.rbac.v3.RBAC>`) Specify the RBAC rules to be applied globally.
  If absent, no enforcing RBAC policy will be applied.
  If present and empty, DENY.
  If both rules and matcher are configured, rules will be ignored.


.. _envoy_v3_api_field_extensions.filters.network.rbac.v3.RBAC.matcher:


matcher
  (:ref:`.xds.type.matcher.v3.Matcher <envoy_v3_api_msg_.xds.type.matcher.v3.Matcher>`) The match tree to use when resolving RBAC action for incoming connections. Connections do
  not match any matcher will be denied.
  If absent, no enforcing RBAC matcher will be applied.
  If present and empty, deny all connections.

  .. warning::
     This API feature is currently work-in-progress. API features marked as work-in-progress are not considered stable, are not covered by the :ref:`threat model <arch_overview_threat_model>`, are not supported by the security team, and are subject to breaking changes. Do not use this feature without understanding each of the previous points.



.. _envoy_v3_api_field_extensions.filters.network.rbac.v3.RBAC.shadow_rules:


shadow_rules
  (:ref:`config.rbac.v3.RBAC <envoy_v3_api_msg_config.rbac.v3.RBAC>`) Shadow rules are not enforced by the filter but will emit stats and logs
  and can be used for rule testing.
  If absent, no shadow RBAC policy will be applied.
  If both shadow rules and shadow matcher are configured, shadow rules will be ignored.


.. _envoy_v3_api_field_extensions.filters.network.rbac.v3.RBAC.shadow_matcher:


shadow_matcher
  (:ref:`.xds.type.matcher.v3.Matcher <envoy_v3_api_msg_.xds.type.matcher.v3.Matcher>`) The match tree to use for emitting stats and logs which can be used for rule testing for
  incoming connections.
  If absent, no shadow matcher will be applied.

  .. warning::
     This API feature is currently work-in-progress. API features marked as work-in-progress are not considered stable, are not covered by the :ref:`threat model <arch_overview_threat_model>`, are not supported by the security team, and are subject to breaking changes. Do not use this feature without understanding each of the previous points.



.. _envoy_v3_api_field_extensions.filters.network.rbac.v3.RBAC.shadow_rules_stat_prefix:


shadow_rules_stat_prefix
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) If specified, shadow rules will emit stats with the given prefix.
  This is useful to distinguish the stat when there are more than 1 RBAC filter configured with
  shadow rules.


.. _envoy_v3_api_field_extensions.filters.network.rbac.v3.RBAC.stat_prefix:


stat_prefix
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, *REQUIRED*) The prefix to use when emitting statistics.


.. _envoy_v3_api_field_extensions.filters.network.rbac.v3.RBAC.enforcement_type:


enforcement_type
  (:ref:`extensions.filters.network.rbac.v3.RBAC.EnforcementType <envoy_v3_api_enum_extensions.filters.network.rbac.v3.RBAC.EnforcementType>`) RBAC enforcement strategy. By default RBAC will be enforced only once
  when the first byte of data arrives from the downstream. When used in
  conjunction with filters that emit dynamic metadata after decoding
  every payload (e.g., Mongo, MySQL, Kafka) set the enforcement type to
  CONTINUOUS to enforce RBAC policies on every message boundary.


.. _envoy_v3_api_enum_extensions.filters.network.rbac.v3.RBAC.EnforcementType:

Enum extensions.filters.network.rbac.v3.RBAC.EnforcementType
------------------------------------------------------------


:repo:`[extensions.filters.network.rbac.v3.RBAC.EnforcementType proto] <api/envoy/extensions/filters/network/rbac/v3/rbac.proto#L33>`




.. _envoy_v3_api_enum_value_extensions.filters.network.rbac.v3.RBAC.EnforcementType.ONE_TIME_ON_FIRST_BYTE:


ONE_TIME_ON_FIRST_BYTE
  *(DEFAULT)* ⁣Apply RBAC policies when the first byte of data arrives on the connection.


.. _envoy_v3_api_enum_value_extensions.filters.network.rbac.v3.RBAC.EnforcementType.CONTINUOUS:


CONTINUOUS
  ⁣Continuously apply RBAC policies as data arrives. Use this mode when
  using RBAC with message oriented protocols such as Mongo, MySQL, Kafka,
  etc. when the protocol decoders emit dynamic metadata such as the
  resources being accessed and the operations on the resources.



