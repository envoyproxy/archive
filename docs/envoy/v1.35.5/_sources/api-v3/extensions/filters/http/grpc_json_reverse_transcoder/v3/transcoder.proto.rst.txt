.. _envoy_v3_api_file_envoy/extensions/filters/http/grpc_json_reverse_transcoder/v3/transcoder.proto:

gRPC-JSON reverse transcoder (proto)
====================================

.. _extension_envoy.filters.http.grpc_json_reverse_transcoder:

This extension has the qualified name ``envoy.filters.http.grpc_json_reverse_transcoder``


.. note::
  This extension is functional but has not had substantial production burn time,
  use only with this caveat.

  This extension has an unknown security posture and should only be
  used in deployments where both the downstream and upstream are
  trusted.

.. tip::
  This extension extends and can be used with the following extension category:


  - :ref:`envoy.filters.http <extension_category_envoy.filters.http>`



  This extension must be configured with one of the following type URLs:



  - :ref:`type.googleapis.com/envoy.extensions.filters.http.grpc_json_reverse_transcoder.v3.GrpcJsonReverseTranscoder <envoy_v3_api_msg_extensions.filters.http.grpc_json_reverse_transcoder.v3.GrpcJsonReverseTranscoder>`



gRPC-JSON reverse transcoder :ref:`configuration overview <config_http_filters_grpc_json_reverse_transcoder>`.




.. _envoy_v3_api_msg_extensions.filters.http.grpc_json_reverse_transcoder.v3.GrpcJsonReverseTranscoder:

extensions.filters.http.grpc_json_reverse_transcoder.v3.GrpcJsonReverseTranscoder
---------------------------------------------------------------------------------


:repo:`[extensions.filters.http.grpc_json_reverse_transcoder.v3.GrpcJsonReverseTranscoder proto] <api/envoy/extensions/filters/http/grpc_json_reverse_transcoder/v3/transcoder.proto#L27>`

``GrpcJsonReverseTranscoder`` is the filter configuration for the gRPC JSON
reverse transcoder. The reverse transcoder acts as a bridge between a gRPC
client and an HTTP/JSON server, converting the gRPC request into HTTP/JSON
for the HTTP backend and the HTTP/JSON response back to gRPC for the gRPC
client. This effectively reverses the behavior of the
:ref:`grpc_json_transcoder filter <config_http_filters_grpc_json_transcoder>`,
allowing a gRPC client to communicate with an HTTP/JSON server.



.. code-block:: json
  :force:

  {
    "descriptor_path": ...,
    "descriptor_binary": ...,
    "max_request_body_size": {...},
    "max_response_body_size": {...},
    "api_version_header": ...,
    "request_json_print_options": {...}
  }

.. _envoy_v3_api_field_extensions.filters.http.grpc_json_reverse_transcoder.v3.GrpcJsonReverseTranscoder.descriptor_path:


descriptor_path
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Supplies the filename of
  :ref:`the proto descriptor set
  <config_grpc_json_reverse_transcoder_generate_proto_descriptor_set>` for the gRPC services.
  If set, takes precedence over the ``descriptor_binary`` field.


.. _envoy_v3_api_field_extensions.filters.http.grpc_json_reverse_transcoder.v3.GrpcJsonReverseTranscoder.descriptor_binary:


descriptor_binary
  (`bytes <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Supplies the binary content of
  :ref:`the proto descriptor set
  <config_grpc_json_reverse_transcoder_generate_proto_descriptor_set>` for the gRPC services.
  If ``descriptor_path`` is set, this field is not used.


.. _envoy_v3_api_field_extensions.filters.http.grpc_json_reverse_transcoder.v3.GrpcJsonReverseTranscoder.max_request_body_size:


max_request_body_size
  (`UInt32Value <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#uint32value>`_) The maximum size of a request body to be transcoded, in bytes. A body exceeding this size will
  provoke a ``gRPC status: ResourceExhausted`` response.

  Large values may cause envoy to use a lot of memory if there are many
  concurrent requests.

  If unset, the current stream buffer size is used.


.. _envoy_v3_api_field_extensions.filters.http.grpc_json_reverse_transcoder.v3.GrpcJsonReverseTranscoder.max_response_body_size:


max_response_body_size
  (`UInt32Value <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#uint32value>`_) The maximum size of a response body to be transcoded, in bytes. A body exceeding this size will
  provoke a ``gRPC status: Internal`` response.

  Large values may cause envoy to use a lot of memory if there are many
  concurrent requests.

  If unset, the current stream buffer size is used.


.. _envoy_v3_api_field_extensions.filters.http.grpc_json_reverse_transcoder.v3.GrpcJsonReverseTranscoder.api_version_header:


api_version_header
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) The name of the header field that has the API version of the request.


.. _envoy_v3_api_field_extensions.filters.http.grpc_json_reverse_transcoder.v3.GrpcJsonReverseTranscoder.request_json_print_options:


request_json_print_options
  (:ref:`extensions.filters.http.grpc_json_reverse_transcoder.v3.GrpcJsonReverseTranscoder.PrintOptions <envoy_v3_api_msg_extensions.filters.http.grpc_json_reverse_transcoder.v3.GrpcJsonReverseTranscoder.PrintOptions>`) Control options for upstream request JSON. These options are passed directly to
  `JsonPrintOptions <https://developers.google.com/protocol-buffers/docs/reference/cpp/
  google.protobuf.util.json_util#JsonPrintOptions>`_.


.. _envoy_v3_api_msg_extensions.filters.http.grpc_json_reverse_transcoder.v3.GrpcJsonReverseTranscoder.PrintOptions:

extensions.filters.http.grpc_json_reverse_transcoder.v3.GrpcJsonReverseTranscoder.PrintOptions
----------------------------------------------------------------------------------------------


:repo:`[extensions.filters.http.grpc_json_reverse_transcoder.v3.GrpcJsonReverseTranscoder.PrintOptions proto] <api/envoy/extensions/filters/http/grpc_json_reverse_transcoder/v3/transcoder.proto#L28>`




.. code-block:: json
  :force:

  {
    "always_print_primitive_fields": ...,
    "always_print_enums_as_ints": ...,
    "use_canonical_field_names": ...
  }

.. _envoy_v3_api_field_extensions.filters.http.grpc_json_reverse_transcoder.v3.GrpcJsonReverseTranscoder.PrintOptions.always_print_primitive_fields:


always_print_primitive_fields
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Whether to always print primitive fields. By default primitive
  fields with default values will be omitted in JSON output. For
  example, an int32 field set to 0 will be omitted. Setting this flag to
  true will override the default behavior and print primitive fields
  regardless of their values. Defaults to false.


.. _envoy_v3_api_field_extensions.filters.http.grpc_json_reverse_transcoder.v3.GrpcJsonReverseTranscoder.PrintOptions.always_print_enums_as_ints:


always_print_enums_as_ints
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Whether to always print enums as ints. By default they are rendered
  as strings. Defaults to false.


.. _envoy_v3_api_field_extensions.filters.http.grpc_json_reverse_transcoder.v3.GrpcJsonReverseTranscoder.PrintOptions.use_canonical_field_names:


use_canonical_field_names
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Whether to convert the proto field names to ``json_name`` annotation value, or lower camel case,
  in absence of ``json_name``. By default the field names will be preserved after conversion.
  Setting this flag will convert the field names to their canonical form. Defaults to false.

  Example:

  .. code-block:: proto

      message Author {
        int64 id = 1;
        enum Gender {
          UNKNOWN = 0;
          MALE = 1;
          FEMALE = 2;
        };
        Gender gender = 2;
        string first_name = 3;
        string last_name = 4 [json_name = "lname"];
      }

  The above proto message after being transcoded to JSON with
  ``use_canonical_field_names`` set to ``false`` will have the
  field names same as in the proto message, as follows:

  .. code-block:: json

      {
        "id": "12345",
        "gender": "MALE",
        "first_name": "John",
        "last_name": "Doe"
      }

  and with the ``use_canonical_field_names`` set to ``true``, the
  transcoded JSON will have ``first_name`` converted to camelCase
  and ``last_name`` converted to its ``json_name`` annotation value,
  as follows:

  .. code-block:: json

      {
        "id": "12345",
        "gender": "MALE",
        "firstName": "John",
        "lname": "Doe"
      }




